// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.2
// source: voice.proto

package voice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoiceServiceClient is the client API for VoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceServiceClient interface {
	// 初始化会话(单项请求)
	Initial(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	// 传输处理发音数据(服务端流式)
	Process(ctx context.Context, opts ...grpc.CallOption) (VoiceService_ProcessClient, error)
	// 关闭会话
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	// 初始化会话（带发音）
	InitialWithPron(ctx context.Context, in *InitPronRequest, opts ...grpc.CallOption) (*InitPronResponse, error)
	// 单词评测
	WordEval(ctx context.Context, in *WordEvalRequest, opts ...grpc.CallOption) (*WordEvalResponse, error)
}

type voiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceServiceClient(cc grpc.ClientConnInterface) VoiceServiceClient {
	return &voiceServiceClient{cc}
}

func (c *voiceServiceClient) Initial(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/voice.VoiceService/Initial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) Process(ctx context.Context, opts ...grpc.CallOption) (VoiceService_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &VoiceService_ServiceDesc.Streams[0], "/voice.VoiceService/Process", opts...)
	if err != nil {
		return nil, err
	}
	x := &voiceServiceProcessClient{stream}
	return x, nil
}

type VoiceService_ProcessClient interface {
	Send(*ProcessRequest) error
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type voiceServiceProcessClient struct {
	grpc.ClientStream
}

func (x *voiceServiceProcessClient) Send(m *ProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voiceServiceProcessClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voiceServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/voice.VoiceService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) InitialWithPron(ctx context.Context, in *InitPronRequest, opts ...grpc.CallOption) (*InitPronResponse, error) {
	out := new(InitPronResponse)
	err := c.cc.Invoke(ctx, "/voice.VoiceService/InitialWithPron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) WordEval(ctx context.Context, in *WordEvalRequest, opts ...grpc.CallOption) (*WordEvalResponse, error) {
	out := new(WordEvalResponse)
	err := c.cc.Invoke(ctx, "/voice.VoiceService/WordEval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceServiceServer is the server API for VoiceService service.
// All implementations must embed UnimplementedVoiceServiceServer
// for forward compatibility
type VoiceServiceServer interface {
	// 初始化会话(单项请求)
	Initial(context.Context, *InitRequest) (*InitResponse, error)
	// 传输处理发音数据(服务端流式)
	Process(VoiceService_ProcessServer) error
	// 关闭会话
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	// 初始化会话（带发音）
	InitialWithPron(context.Context, *InitPronRequest) (*InitPronResponse, error)
	// 单词评测
	WordEval(context.Context, *WordEvalRequest) (*WordEvalResponse, error)
	mustEmbedUnimplementedVoiceServiceServer()
}

// UnimplementedVoiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceServiceServer struct {
}

func (UnimplementedVoiceServiceServer) Initial(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initial not implemented")
}
func (UnimplementedVoiceServiceServer) Process(VoiceService_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedVoiceServiceServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedVoiceServiceServer) InitialWithPron(context.Context, *InitPronRequest) (*InitPronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitialWithPron not implemented")
}
func (UnimplementedVoiceServiceServer) WordEval(context.Context, *WordEvalRequest) (*WordEvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WordEval not implemented")
}
func (UnimplementedVoiceServiceServer) mustEmbedUnimplementedVoiceServiceServer() {}

// UnsafeVoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceServiceServer will
// result in compilation errors.
type UnsafeVoiceServiceServer interface {
	mustEmbedUnimplementedVoiceServiceServer()
}

func RegisterVoiceServiceServer(s grpc.ServiceRegistrar, srv VoiceServiceServer) {
	s.RegisterService(&VoiceService_ServiceDesc, srv)
}

func _VoiceService_Initial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).Initial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voice.VoiceService/Initial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).Initial(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceServiceServer).Process(&voiceServiceProcessServer{stream})
}

type VoiceService_ProcessServer interface {
	Send(*ProcessResponse) error
	Recv() (*ProcessRequest, error)
	grpc.ServerStream
}

type voiceServiceProcessServer struct {
	grpc.ServerStream
}

func (x *voiceServiceProcessServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voiceServiceProcessServer) Recv() (*ProcessRequest, error) {
	m := new(ProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VoiceService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voice.VoiceService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_InitialWithPron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).InitialWithPron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voice.VoiceService/InitialWithPron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).InitialWithPron(ctx, req.(*InitPronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_WordEval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordEvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).WordEval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voice.VoiceService/WordEval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).WordEval(ctx, req.(*WordEvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoiceService_ServiceDesc is the grpc.ServiceDesc for VoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.VoiceService",
	HandlerType: (*VoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initial",
			Handler:    _VoiceService_Initial_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _VoiceService_Close_Handler,
		},
		{
			MethodName: "InitialWithPron",
			Handler:    _VoiceService_InitialWithPron_Handler,
		},
		{
			MethodName: "WordEval",
			Handler:    _VoiceService_WordEval_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _VoiceService_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "voice.proto",
}
